syntax = "proto2";
//package test;

import "Solidity.proto";

message Mining {
	// required fields
	required .solidity.address feeRecipient = 1;

	// optional fields
	optional .solidity.address miner = 2;
	repeated .solidity.uint8   sig = 3;
}

message Spendable {
	required bool              initialized = 1;
	required .solidity.uint    amount = 2;
	required .solidity.uint    reserve = 3;
}

message Order {
        // required fields
	required .solidity.address owner = 1;
	required .solidity.address tokenS = 2;
	required .solidity.address tokenB = 3;
	required .solidity.uint    amountS = 4;
	required .solidity.uint    amountB = 5;
	required .solidity.uint    validSince = 6;
	required Spendable         tokenSpendableS = 7;
	required Spendable         tokenSpendableFee = 8;

        // optional fields
	optional .solidity.address dualAuthAddr = 9;
	optional .solidity.address broker = 10;
        optional Spendable         brokerSpendableS = 11;
        optional Spendable         brokerSpendableFee = 12;
        optional .solidity.address orderInterceptor = 13;
        optional .solidity.address wallet = 14;
        optional .solidity.uint    validUntil = 15;
	repeated .solidity.uint8   sig = 16;
        repeated .solidity.uint8   dualAuthSig = 17;
        optional bool              allOrNone = 18;
        optional .solidity.address feeToken = 19;
        optional .solidity.uint    feeAmount = 20;
        optional .solidity.uint16  feePercentage = 21; // Post-trading
        optional .solidity.int16   waiveFeePercentage = 22;
        optional .solidity.uint16  tokenSFeePercentage = 23; // Pre-trading
        optional .solidity.uint16  tokenBFeePercentage = 24; // Post-trading
        optional .solidity.address tokenRecipient = 25;
        optional .solidity.uint16  walletSplitPercentage = 26;
}

message Ring {
        required .solidity.uint    size = 1;
        required .solidity.bytes32 hash = 2;
        required .solidity.uint    minerFeesToOrdersPercentage = 3;
        required bool              valid = 4;
}

message Input {
	required Mining            mining = 1;
	repeated Order             orders = 2;
	repeated Ring              rings = 3;
}